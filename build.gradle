
apply plugin: 'java'
version="2.11"
fstversion="1.51"

jar.baseName='fastcast'

def javafxLib = "jfxrt.jar"

targetCompatibility = 1.7
sourceCompatibility = 1.7
compileJava.options.debugOptions.debugLevel = "source,lines,vars"
compileTestJava.options.debugOptions.debugLevel = "source,lines,vars"

def getJavaFXPath(def javafxLib) {
    def javaHome = System.env["JAVA_HOME"]
    if (javaHome == null) {
        throw new RuntimeException("JAVA_HOME environment variable must be set")
    }
    def javafxrt = "jre" + File.separator + "lib" + File.separator + javafxLib
    return new File(javaHome, javafxrt).absolutePath
}

repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo urls: "https://oss.sonatype.org/content/repositories/releases/"
}

dependencies {
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.13'
    compile group: 'org.javassist', name: 'javassist', version: '3.18.1-GA'
    compile group: 'de.nustaq', name: 'fst', version: fstversion
    compile files(getJavaFXPath(javafxLib))
}

task bigtest(type: Jar) {
    archiveName = 'bigtest.jar'
    from sourceSets.test.output
    include ('de/nustaq/fastcast/samples/**/*')
    include ('de/nustaq/fastcast/bigtest/**/*')
    include ('de/nustaq/fastcast/test/**/*')
}

task copyToLib(type: Copy, dependsOn:jar) {
    into "$buildDir/output/lib"
    from configurations.runtime
}
build.dependsOn copyToLib

task allJar(type: Jar, dependsOn:copyToLib) {
    archiveName = 'fastcast-'+version+"-onejar.jar"
    from zipTree("$buildDir/output/lib/javassist-3.18.1-GA.jar").matching { true }
    from zipTree("$buildDir/output/lib/fst-"+fstversion+'.jar').matching { true }
    from zipTree("$buildDir/libs/fastcast-"+version+'.jar').matching { true }
    from zipTree("$buildDir/output/lib/snakeyaml-1.13.jar").matching { true }
}

task release(type: Jar, dependsOn:allJar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from 'pom.xml'
}

